name: CI/CD Pipeline with Strict Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Linting - Must pass
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint (strict)
      run: npm run lint -- --max-warnings 0
    
    - name: Lint result
      if: failure()
      run: |
        echo "‚ùå Linting failed! Fix all ESLint errors and warnings before merge."
        exit 1

  # Job 2: Security Audit - Must pass
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Security result
      if: failure()
      run: |
        echo "‚ùå Security vulnerabilities found! Fix them before merge."
        exit 1

  # Job 3: Tests with Coverage - Must achieve 90%+
  test:
    name: Tests & Coverage (90%+ Required)
    runs-on: ubuntu-latest
    needs: [lint, security]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: appuser
          POSTGRES_PASSWORD: appsecret
          POSTGRES_DB: appdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: npm test
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: appdb
        DB_USER: appuser
        DB_PASS: appsecret
        JWT_SECRET: supersecretkey
    
    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(npm test -- --silent --passWithNoTests 2>/dev/null | grep -oP 'All files.*?(\d+\.\d+)' | grep -oP '\d+\.\d+' | tail -1 || echo "0")
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"
    
    - name: Check coverage threshold (90% minimum)
      run: |
        COVERAGE=${{ steps.coverage.outputs.coverage }}
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below 90% threshold!"
          echo "üìù Add more tests to increase coverage before merge."
          exit 1
        else
          echo "‚úÖ Coverage $COVERAGE% meets 90% threshold"
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # wajib kalau org/protected branch
        files: ./coverage.out
        flags: unittests
        fail_ci_if_error: true

  # Job 4: Docker Build Test - Must succeed
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        echo "üê≥ Building Docker image..."
        docker build -t advanced-backend-api:test .
    
    - name: Test Docker image
      run: |
        echo "üß™ Testing Docker image..."
        # Create a custom network for container communication
        docker network create test-network
        
        # Run PostgreSQL container on the custom network
        docker run -d --name test-postgres \
          --network test-network \
          -e POSTGRES_USER=appuser \
          -e POSTGRES_PASSWORD=appsecret \
          -e POSTGRES_DB=appdb \
          postgres:15
        
        # Wait for PostgreSQL to be ready
        echo "‚è≥ Waiting for PostgreSQL to be ready..."
        sleep 10
        
        # Run application container on the same network
        docker run -d --name test-container \
          --network test-network \
          -p 3001:3000 \
          -e DB_HOST=test-postgres \
          -e DB_PORT=5432 \
          -e DB_NAME=appdb \
          -e DB_USER=appuser \
          -e DB_PASS=appsecret \
          -e JWT_SECRET=supersecretkey \
          -e NODE_ENV=production \
          advanced-backend-api:test
        
        # Wait for container to start and be ready
        echo "‚è≥ Waiting for application to be ready..."
        sleep 15
        
        # Check if container is still running
        if ! docker ps | grep test-container; then
          echo "‚ùå Container failed to start or exited immediately"
          docker logs test-container
          docker logs test-postgres
          exit 1
        fi
        
        # Test health endpoint using curl from host
        echo "üîç Testing health endpoint..."
        for i in {1..5}; do
          if curl -f http://localhost:3001/health; then
            echo "‚úÖ Health check passed!"
            break
          else
            echo "‚è≥ Attempt $i failed, retrying in 3 seconds..."
            sleep 3
            if [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              echo "üìã Application logs:"
              docker logs test-container
              echo "üìã PostgreSQL logs:"
              docker logs test-postgres
              exit 1
            fi
          fi
        done
        
        # Cleanup
        docker stop test-container test-postgres || true
        docker rm test-container test-postgres || true
        docker network rm test-network || true
          else
            echo "‚è≥ Attempt $i failed, retrying in 3 seconds..."
            sleep 3
            if [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              docker logs test-container
              exit 1
            fi
          fi
        done
        
        # Cleanup
        docker stop test-container
        docker rm test-container
    
    - name: Docker build result
      if: failure()
      run: |
        echo "‚ùå Docker build or test failed! Fix Docker configuration before merge."
        exit 1
    
    - name: Docker success
      run: |
        echo "‚úÖ Docker build and test successful!"

  # Job 5: Integration Tests (Optional but recommended)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: appuser
          POSTGRES_PASSWORD: appsecret
          POSTGRES_DB: appdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run integration tests
      run: |
        npm start &
        sleep 10
        
        # Test API endpoints
        curl -f http://localhost:3000/health
        
        # Test user registration
        curl -X POST http://localhost:3000/api/users/register \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","password":"Test123"}' \
          -f
        
        # Test user login
        TOKEN=$(curl -X POST http://localhost:3000/api/users/login \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","password":"Test123"}' \
          -s | jq -r '.token')
        
        # Test protected endpoint
        curl -X GET http://localhost:3000/api/users/profile \
          -H "Authorization: Bearer $TOKEN" \
          -f
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: appdb
        DB_USER: appuser
        DB_PASS: appsecret
        JWT_SECRET: test-secret-key

  # Final job: Quality Gate Summary
  quality-gate:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [lint, security, test, docker-build]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.lint.result }}" != "success" ]]; then
          echo "‚ùå Linting failed"
          exit 1
        fi
        
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "‚ùå Security audit failed"
          exit 1
        fi
        
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "‚ùå Tests or coverage failed"
          exit 1
        fi
        
        if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "‚ùå Docker build failed"
          exit 1
        fi
        
        echo "‚úÖ All quality gates passed! Ready to merge."
